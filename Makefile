# Makefile –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏

.PHONY: help install test lint format clean run coverage docs

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
NC=\033[0m # No Color

# Python –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
PYTHON := python
PIP := pip

help: ## –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

install: ## –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
	@echo "$(YELLOW)–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install -r requirements.txt

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...$(NC)"
	$(PYTHON) -m pytest test_filesystem.py test_advanced.py -v

test-cov: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –ø–æ–∫—Ä–∏—Ç—Ç—è...$(NC)"
	$(PYTHON) -m pytest test_filesystem.py test_advanced.py -v --cov=. --cov-report=html --cov-report=term-missing

test-fast: ## –®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ)
	@echo "$(YELLOW)–®–≤–∏–¥–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤...$(NC)"
	$(PYTHON) -m pytest test_filesystem.py test_advanced.py -v -n auto

lint: ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
	@echo "$(YELLOW)–°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É...$(NC)"
	flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
	flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
	mypy . --ignore-missing-imports

format: ## –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É
	@echo "$(YELLOW)–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É...$(NC)"
	black .
	isort .

format-check: ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –∑–º—ñ–Ω
	@echo "$(YELLOW)–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è...$(NC)"
	black --check --diff .
	isort --check-only --diff .

clean: ## –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
	@echo "$(YELLOW)–û—á–∏—â–µ–Ω–Ω—è...$(NC)"
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf .mypy_cache/
	rm -f storage.bin
	rm -f *.bin
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É
	@echo "$(YELLOW)–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...$(NC)"
	$(PYTHON) main.py

demo: ## –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
	@echo "$(YELLOW)–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...$(NC)"
	@echo "mkfs 10" | $(PYTHON) main.py
	@echo "$(GREEN)–°—Ç–≤–æ—Ä–µ–Ω–æ –§–° –∑ 10 –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏$(NC)"
	@echo -e "ls\ncreate demo.txt\nopen demo.txt\nwrite 0\nHello, World!\nseek 0 0\nread 0 20\nstat demo.txt\nls\nexit" | $(PYTHON) main.py

benchmark: ## –¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...$(NC)"
	$(PYTHON) -c "import time; \
	from block_device import BlockDevice; \
	from filesystem import FileSystem; \
	from vfs import VFS; \
	device = BlockDevice('bench.bin', block_size=4096, total_blocks=1000); \
	fs = FileSystem(device, max_inodes=100); \
	vfs = VFS(fs); \
	start = time.time(); \
	vfs.mkfs(100); \
	print(f'–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: {time.time()-start:.3f}s'); \
	start = time.time(); \
	[vfs.create(f'file_{i}.txt') for i in range(50)]; \
	print(f'–°—Ç–≤–æ—Ä–µ–Ω–Ω—è 50 —Ñ–∞–π–ª—ñ–≤: {time.time()-start:.3f}s')"
	@rm -f bench.bin

coverage: ## –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–∫—Ä–∏—Ç—Ç—è
	@echo "$(YELLOW)–ê–Ω–∞–ª—ñ–∑ –ø–æ–∫—Ä–∏—Ç—Ç—è –∫–æ–¥—É...$(NC)"
	$(PYTHON) -m pytest test_filesystem.py test_advanced.py --cov=. --cov-report=html
	@echo "$(GREEN)–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ htmlcov/index.html$(NC)"

docs: ## –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
	@echo "$(YELLOW)–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó...$(NC)"
	$(PYTHON) -c "import pydoc; pydoc.writedoc('block_device')"
	$(PYTHON) -c "import pydoc; pydoc.writedoc('filesystem')"
	$(PYTHON) -c "import pydoc; pydoc.writedoc('vfs')"
	$(PYTHON) -c "import pydoc; pydoc.writedoc('inode')"
	$(PYTHON) -c "import pydoc; pydoc.writedoc('open_file')"

pre-commit: format-check lint test ## –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º—ñ—Ç–æ–º
	@echo "$(GREEN)‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!$(NC)"

ci: install lint test-cov ## –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª CI
	@echo "$(GREEN)‚úÖ CI –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!$(NC)"

# –¶—ñ–ª—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â
dev-install: ## –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
	$(PIP) install -e .
	$(PIP) install -r requirements.txt

prod-test: ## –¢–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
	$(PYTHON) -m pytest test_filesystem.py test_advanced.py -v --tb=short

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç
info: ## –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç
	@echo "$(YELLOW)üìÅ –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ v1.0$(NC)"
	@echo "–ú–æ–≤–∞: Python $(shell python --version | cut -d' ' -f2)"
	@echo "–ê–≤—Ç–æ—Ä: Student"
	@echo "–õ—ñ—Ü–µ–Ω–∑—ñ—è: MIT"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏:$(NC)"
	@ls -la *.py | head -10
