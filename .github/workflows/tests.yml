name: Тести файлової системи

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest test_filesystem.py test_advanced.py test_edge_cases.py -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        pip install -r requirements.txt
    
    - name: Check code formatting with black
      run: |
        black --check --diff . || echo "Black formatting check failed but continuing..."
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "isort check failed but continuing..."
    
    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "flake8 check failed but continuing..."

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        # Test filesystem creation
        echo "mkfs 10" | timeout 10 python main.py || echo "Expected timeout"
        
        # Check if filesystem file was created
        if [ -f storage.bin ]; then
          echo "✅ Файл ФС створено"
        else
          echo "❌ Файл ФС не створено"
        fi
        
        # Test basic operations
        echo -e "ls\ncreate test.txt\nls\nstat test.txt\nexit" | timeout 10 python main.py || echo "Expected timeout"
    
    - name: Run benchmark tests
      run: |
        python -c "
        import time
        from block_device import BlockDevice
        from filesystem import FileSystem
        from vfs import VFS
        
        print('Запуск тестів продуктивності...')
        
        # Performance test
        device = BlockDevice('bench.bin', block_size=4096, total_blocks=1000)
        fs = FileSystem(device, max_inodes=100)
        vfs = VFS(fs)
        
        # Initialization
        start = time.time()
        vfs.mkfs(100)
        init_time = time.time() - start
        print(f'Ініціалізація ФС: {init_time:.3f}s')
        
        # File creation
        start = time.time()
        for i in range(50):
            vfs.create(f'file_{i}.txt')
        create_time = time.time() - start
        print(f'Створення 50 файлів: {create_time:.3f}s')
        
        # Read/write operations
        fd = vfs.open('file_0.txt')
        data = b'x' * 1024
        
        start = time.time()
        for i in range(100):
            vfs.seek(fd, 0)
            vfs.write(fd, data)
        write_time = time.time() - start
        print(f'100 записів по 1KB: {write_time:.3f}s')
        
        start = time.time()
        for i in range(100):
            vfs.seek(fd, 0)
            vfs.read(fd, 1024)
        read_time = time.time() - start
        print(f'100 читань по 1KB: {read_time:.3f}s')
        
        print('Тести продуктивності завершено успішно!')
        "
    
    - name: Cleanup
      run: |
        rm -f storage.bin bench.bin *.bin || true
